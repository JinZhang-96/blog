<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Doc List</title>
    <url>/blog/2023/07/27/doc-list/</url>
    <content><![CDATA[<p>记录一些常用的 API 文档  </p>
<span id="more"></span>

<ol>
<li><p><a href="https://yeasy.gitbook.io/docker_practice/">Docker 中文</a></p>
</li>
<li><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a></p>
</li>
<li><p><a href="https://zhonghui.chat/">ChatGPT</a></p>
</li>
<li><p><a href="https://leafletjs.com/index.html">leafletjs</a></p>
</li>
<li><p><a href="https://geekdaxue.co/read/leaflet-cn/v1.9.3-doc">leafletjs 中文</a></p>
</li>
<li><p><a href="https://datatracker.ietf.org/doc/html/rfc7946#autoid-1">GeoJSON</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Help</category>
      </categories>
      <tags>
        <tag>Doc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Guide</title>
    <url>/blog/2023/07/23/hexo-guide/</url>
    <content><![CDATA[<p><a href="https://hexo.io/">Hexo</a> 是一个快速搭建博客网站的框架。<br>以下是官网的描述：</p>
<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  </p>
</blockquote>
<span id="more"></span>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>Hexo 支持 Markdown（或其他标记语言）书写文章，其内部有基于 Node.js 的解析程序。通过 <code>hexo generate</code> 命令可以把文章解析为 html 静态文件。</p>
<h3 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h3><p>框架内置了博客系统中基本的功能模块，所以无需从零开发，只需修改一些配置文件， 就可以轻松快速的搭建起一个博客系统。</p>
<h3 id="主题丰富"><a href="#主题丰富" class="headerlink" title="主题丰富"></a>主题丰富</h3><p>Hexo 生态圈内有上百个主题，只需修改几个配置字段就可以让网站更换风格。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Hexo 是基于 Node.js 的，所以使用 Hexo ，需要先在操作系统安装 Node.js ，并配置好环境变量。</p>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/zh-cn/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npmmirror.com/mirrors/node/">淘宝 Node.js 镜像</a> 下载。</p>
<p>其它的安装方法：</p>
<ul>
<li>Windows：通过 nvs（推荐）或者 nvm 安装。</li>
<li>Mac：使用 Homebrew 或 MacPorts 安装。</li>
<li>Linux（DEB&#x2F;RPM-based）：从 NodeSource 安装。</li>
<li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。</li>
<li>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</li>
</ul>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<p>全局安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>局部安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure>
<p>我这里使用了局部安装命令，具体安装步骤如下：</p>
<ol>
<li><p>安装<br>新建目录，进入该目录，执行以下命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo  </span><br></pre></td></tr></table></figure>
<p>安装成功后，会生成一个 package.json 文件，编辑此文件，添加如下配置：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;init&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo init&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化<br>执行以下命令初始化 Hexo 到指定目录：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>初始化完成后，指定目录的目录结构如下：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">├── themes</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动<br>执行下列命令，启动 Hexo 博客：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run server</span><br></pre></td></tr></table></figure>
<p>打开浏览器访问 <code>http://localhost:4000</code> ，界面如 (图一) 所示：<br><img data-src="/blog/2023/07/23/hexo-guide/index.jpg" alt="(图一)"></p>
</li>
</ol>
<h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p>Hexo<a href="https://hexo.io/themes/">开源社区</a> 提供了很多主题。</p>
<p>执行以下命令安装主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install theme</span><br></pre></td></tr></table></figure>
<h3 id="配置（5-0-0-版本及以上）"><a href="#配置（5-0-0-版本及以上）" class="headerlink" title="配置（5.0.0 版本及以上）"></a>配置（5.0.0 版本及以上）</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>当前主题名称。值为false时禁用主题</td>
</tr>
<tr>
<td>theme_config</td>
<td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置</td>
</tr>
</tbody></table>
<p>编辑 _config.yml 文件，做如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> [<span class="string">theme</span>]</span><br></pre></td></tr></table></figure>

<p>在 _config.yml 文件所在目录下，创建 _config.[theme].yml 文件，设置主题配置。</p>
<p>Hexo 在合并主题配置时，Hexo 配置文件中的 theme_config 的优先级最高，其次是 _config.[theme].yml 文件，最后是位于主题目录下的 _config.yml 文件。</p>
<h2 id="GitHub-Pages-部署"><a href="#GitHub-Pages-部署" class="headerlink" title="GitHub Pages 部署"></a>GitHub Pages 部署</h2><p>GitHub Pages 是 <a href="https://github.com/">Github</a> 提供的免费服务，它可以让我们部署一些静态资源。<br>这样我们不需要购买服务器和域名， 就可以在公网访问自己的博客了。</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ol>
<li><p>建立名为 &lt;你的 GitHub 用户名&gt;.github.io 的储存库，若之前已将 Hexo 上传至其他储存库，将该储存库重命名即可。</p>
</li>
<li><p>将 Hexo 文件夹中的文件 push 到储存库的默认分支，默认分支通常名为 main，旧一点的储存库可能名为 master。<br>将 main 分支 push 到 GitHub：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin main</span><br></pre></td></tr></table></figure>
<p> 默认情况下 public&#x2F; 不会被上传(也不该被上传)，确保 .gitignore 文件中包含一行 public&#x2F;。整体文件夹结构应该与 范例储存库 大致相似。</p>
</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li><p>安装 hexo-deployer-git。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 _config.yml 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line"><span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p>
<p> 除非你使用令牌或 SSH 密钥认证，否则你会被提示提供目标仓库的用户名和密码。<br> hexo-deployer-git 并不会存储你的用户名和密码. 请使用 <a href="https://git-scm.com/docs/git-credential-cache">git-credential-cache</a> 来临时存储它们。</p>
</li>
<li><p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。</p>
</li>
</ol>
<p>到此为止，Hexo的安装、启动、配置、发布就介绍完了。</p>
<hr>
<p><strong>以下是Hexo的一些配置参数说明和命令说明，可以进行参考：</strong></p>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</td>
</tr>
</tbody></table>
<p>其中，description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者。</p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>网址, 必须以 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 开头</td>
<td></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td>url’s pathname</td>
</tr>
<tr>
<td>permalink</td>
<td>文章的 永久链接 格式</td>
<td>:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td>
</tr>
<tr>
<td>permalink_defaults</td>
<td>永久链接中各部分的默认值</td>
<td></td>
</tr>
<tr>
<td>pretty_urls</td>
<td>改写 permalink 的值来美化 URL</td>
<td></td>
</tr>
<tr>
<td>pretty_urls.trailing_index</td>
<td>是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td>
<td>true</td>
</tr>
<tr>
<td>pretty_urls.trailing_html</td>
<td>是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</td>
<td>true</td>
</tr>
</tbody></table>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>source_dir</td>
<td>资源文件夹，这个文件夹用来存放内容。</td>
<td>source</td>
</tr>
<tr>
<td>public_dir</td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td>public</td>
</tr>
<tr>
<td>tag_dir</td>
<td>标签文件夹</td>
<td>tags</td>
</tr>
<tr>
<td>archive_dir</td>
<td>归档文件夹</td>
<td>archives</td>
</tr>
<tr>
<td>category_dir</td>
<td>分类文件夹</td>
<td>categories</td>
</tr>
<tr>
<td>code_dir</td>
<td>Include code 文件夹，source_dir 下的子目录</td>
<td>downloads&#x2F;code</td>
</tr>
<tr>
<td>i18n_dir</td>
<td>国际化（i18n）文件夹</td>
<td>:lang</td>
</tr>
<tr>
<td>skip_render</td>
<td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td></td>
</tr>
</tbody></table>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>new_post_name</td>
<td>新文章的文件名称</td>
<td>:title.md</td>
</tr>
<tr>
<td>default_layout</td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td>auto_spacing</td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td>titlecase</td>
<td>把标题转换为 title case</td>
<td>false</td>
</tr>
<tr>
<td>external_link</td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>external_link.enable</td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>external_link.field</td>
<td>对整个网站（site）生效或仅对文章（post）生效</td>
<td>site</td>
</tr>
<tr>
<td>external_link.exclude</td>
<td>需要排除的域名。主域名和子域名如 www 需分别配置</td>
<td>[]</td>
</tr>
<tr>
<td>filename_case</td>
<td>把文件名称转换为 (1) 小写或 (2) 大写</td>
<td>0</td>
</tr>
<tr>
<td>render_drafts</td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td>post_asset_folder</td>
<td>启动 Asset 文件夹</td>
<td>false</td>
</tr>
<tr>
<td>relative_link</td>
<td>把链接改为与根目录的相对位址</td>
<td>false</td>
</tr>
<tr>
<td>future</td>
<td>显示未来的文章</td>
<td>true</td>
</tr>
<tr>
<td>highlight</td>
<td>代码块的设置, 请参考 <a href="https://hexo.io/zh-cn/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td>
<td></td>
</tr>
<tr>
<td>prismjs</td>
<td>代码块的设置, 请参考 <a href="https://hexo.io/zh-cn/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td>
<td></td>
</tr>
</tbody></table>
<h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>default_category</td>
<td>默认分类</td>
<td>uncategorized</td>
</tr>
<tr>
<td>category_map</td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td>tag_map</td>
<td>标签别名</td>
<td></td>
</tr>
</tbody></table>
<h3 id="日期-x2F-时间格式"><a href="#日期-x2F-时间格式" class="headerlink" title="日期 &#x2F; 时间格式"></a>日期 &#x2F; 时间格式</h3><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>date_format</td>
<td>日期格式</td>
<td>YYYY-MM-DD</td>
</tr>
<tr>
<td>time_format</td>
<td>时间格式</td>
<td>HH:mm:ss</td>
</tr>
<tr>
<td>updated_option</td>
<td>当 Front Matter 中没有指定 updated 时 updated 的取值</td>
<td>mtime</td>
</tr>
</tbody></table>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>per_page</td>
<td>每页显示的文章量 (0 &#x3D; 关闭分页功能)</td>
<td>10</td>
</tr>
<tr>
<td>pagination_dir</td>
<td>分页目录</td>
<td>page</td>
</tr>
</tbody></table>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>当前主题名称。值为false时禁用主题</td>
</tr>
<tr>
<td>theme_config</td>
<td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置</td>
</tr>
<tr>
<td>deploy</td>
<td>部署部分的设置</td>
</tr>
<tr>
<td>meta_generator</td>
<td>Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</td>
</tr>
</tbody></table>
<h4 id="独立的-config-theme-yml-文件"><a href="#独立的-config-theme-yml-文件" class="headerlink" title="独立的 _config.[theme].yml 文件"></a>独立的 _config.[theme].yml 文件</h4><p>该特性自 Hexo 5.0.0 起提供</p>
<p>独立的主题配置文件应放置于站点根目录下，支持 yml 或 json 格式。需要配置站点 _config.yml 文件中的 theme 以供 Hexo 寻找 _config.[theme].yml 文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme<span class="punctuation">:</span> <span class="string">&quot;my-theme&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># _config.my-theme.yml</span><br><span class="line">bio<span class="punctuation">:</span> <span class="string">&quot;My awesome bio&quot;</span></span><br><span class="line">foo<span class="punctuation">:</span></span><br><span class="line">  bar<span class="punctuation">:</span> &#x27;a&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio<span class="punctuation">:</span> <span class="string">&quot;Some generic bio&quot;</span></span><br><span class="line">logo<span class="punctuation">:</span> <span class="string">&quot;a-cool-image.png&quot;</span></span><br><span class="line">  foo<span class="punctuation">:</span></span><br><span class="line">    baz<span class="punctuation">:</span> &#x27;b&#x27;</span><br></pre></td></tr></table></figure>
<p>最终主题配置的输出是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  bio<span class="punctuation">:</span> <span class="string">&quot;My awesome bio&quot;</span><span class="punctuation">,</span></span><br><span class="line">  logo<span class="punctuation">:</span> <span class="string">&quot;a-cool-image.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  foo<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    bar<span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    baz<span class="punctuation">:</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo 在合并主题配置时，Hexo 配置文件中的 theme_config 的优先级最高，其次是 _config.[theme].yml 文件，最后是位于主题目录下的 _config.yml 文件。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>Hexo<a href="https://hexo.io/themes/">开源社区</a> 提供了很多主题。</p>
<p>执行以下命令安装主题, 然后参照<a href="#%E6%89%A9%E5%B1%95">扩展</a>配置主题即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install &lt;theme-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<p>本命令相当于执行了以下几步：</p>
<p>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。<br>使用 Yarn 1、pnpm 或 npm 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 Node.js 安装。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<p><code>$ hexo new &quot;post title with whitespace&quot;</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –path</td>
<td>自定义新文章的路径</td>
</tr>
<tr>
<td>-r, –replace</td>
<td>如果存在同名文章，将其替换</td>
</tr>
<tr>
<td>-s, –slug</td>
<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p>
<p><code>hexo new page --path about/me &quot;About me&quot;</code><br>以上命令会创建一个 source&#x2F;about&#x2F;me.md 文件，同时 Front Matter 中的 title 为 “About me”</p>
<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>
<p><code>hexo new page --path about/me</code><br>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p><code>$ hexo generate</code><br>生成静态文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d, –deploy</td>
<td>文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td>监视文件变动</td>
</tr>
<tr>
<td>-b, –bail</td>
<td>生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td>-f, –force</td>
<td>强制重新生成文件</td>
</tr>
<tr>
<td>Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。</td>
<td></td>
</tr>
<tr>
<td>使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td>
<td></td>
</tr>
<tr>
<td>-c, –concurrency</td>
<td>最大同时生成文件的数量，默认无限制</td>
</tr>
<tr>
<td>该命令可以简写为</td>
<td></td>
</tr>
</tbody></table>
<p><code>$ hexo g</code></p>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p><code>$ hexo publish [layout] &lt;filename&gt;</code><br>发表草稿。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>$ hexo server</code><br>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –port</td>
<td>重设端口</td>
</tr>
<tr>
<td>-s, –static</td>
<td>只使用静态文件</td>
</tr>
<tr>
<td>-l, –log</td>
<td>启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p><code>$ hexo deploy</code></p>
<p>部署网站。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-g, –generate</td>
<td>部署之前预先生成静态文件</td>
</tr>
<tr>
<td>该命令可以简写为：</td>
<td></td>
</tr>
</tbody></table>
<p><code>$ hexo d</code></p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>$ hexo render &lt;file1&gt; [file2] ...</code><br>渲染文件。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-o, –output</td>
<td>设置输出路径</td>
</tr>
</tbody></table>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><p><code>$ hexo migrate &lt;type&gt;</code><br>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>$ hexo clean</code></p>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>$ hexo list &lt;type&gt;</code><br>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p><code>$ hexo version</code></p>
<p>显示 Hexo 版本。</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p><code>$ hexo --safe</code><br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p><code>$ hexo --debug</code><br>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>
<h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><p><code>$ hexo --silent</code><br>隐藏终端信息。</p>
<h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>

<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>

<p>显示 source&#x2F;_drafts 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Install</title>
    <url>/blog/2023/07/23/centos/docker-install/</url>
    <content><![CDATA[<p><a href="https://www.docker.com/">Docker</a> 是一款开源的虚拟化容器。<br>本文记录了在 CentOS 7 操作系统中安装 Docker 的完整过程。</p>
<span id="more"></span>

<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>在安装 Docker 之前，需要先检查一下操作系统是否具备以下条件：</p>
<ol>
<li><p>可以正常访问网络</p>
</li>
<li><p>分区文件系统类型，支持 Docker 的存储驱动类型。</p>
</li>
<li><p>操作系统内核版本满足 Docker 的要求。</p>
</li>
</ol>
<h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>因为需要使用 yum 安装 docker ，所以要保证网络正常。<br>首先，执行 <code>ping www.baidu.com</code>，检查能否连接网络。<br>如果 ping 命令不能通过，则需要检查 firewalld 是否已关闭，网卡是否配置正确。</p>
<h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><p>查看防火墙是否关闭，若开启中，则关闭 firewalld ，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status firewalld            ( 查看防火墙状态 )</span><br><span class="line">$ sudo systemctl stop firewalld         ( 关闭防火墙 )</span><br><span class="line">$ sudo systemctl <span class="built_in">disable</span>  firewalld     ( 禁用防火墙。重启操作系统后，防火墙不会自动启动)</span><br></pre></td></tr></table></figure>
<h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>查看网卡信息，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line"></span><br><span class="line">------------------------输出如下--------------------------  </span><br><span class="line"></span><br><span class="line">eno16777736: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.128.3  netmask 255.255.255.0  broadcast 192.168.128.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe90:7a54  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:90:7a:54  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 98076  bytes 117924104 (112.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 20565  bytes 1481553 (1.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 206  bytes 18234 (17.8 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 206  bytes 18234 (17.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>可以看到当前主机有 2 张网卡，其中名字为 lo 这张网卡为本地环回网卡，它的 IP 地址是 127.0.0.1（localhost），实现系统内部发送和接收数据，<br>无需配置；名字的前缀为 eno 的网卡实现与外部网络交换数据， 需要重新配置。  </p>
<p>配置网卡，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysconfig/network-script/ifcfg-[name]     <span class="comment"># name 为网卡的名字</span></span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static        <span class="comment"># static 使用静态 IP; dhcp 通过 dhcp 服务动态分配IP</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=eno16777736</span><br><span class="line">UUID=2bd860aa-dcf9-4e5f-9297-63bfd3b5943c</span><br><span class="line">DEVICE=eno16777736</span><br><span class="line">ONBOOT=<span class="built_in">yes</span>              <span class="comment"># 指定是否在开机时启用该网卡</span></span><br><span class="line">IPADDR=192.168.128.3    <span class="comment"># 配置正确的网卡IP         BOOTPROTO=dhcp 时 无需配置</span></span><br><span class="line">NETMASK=255.255.255.0   <span class="comment"># 配置正确的子网掩码       BOOTPROTO=dhcp 时 无需配置</span></span><br><span class="line">GATEWAY=192.168.128.2   <span class="comment"># 配置正确的网关           BOOTPROTO=dhcp 时 无需配置</span></span><br><span class="line">DNS1=192.168.128.2      <span class="comment"># 配置正确的DNS服务器， 如果错误会导致 IP 可以访问， 域名无法访问的问题</span></span><br><span class="line"></span><br><span class="line">:wq                     <span class="comment"># 保存并退出</span></span><br></pre></td></tr></table></figure>
<p>其中IPADDR 、NETMASK 、GATEWAY 、DNS1 这 4 项不是固定的，要根据实际的网络环境配置。<br>当前主机的虚拟网络编辑器如（图一）所示：<br><img data-src="/blog/2023/07/23/centos/docker-install/network.jpg" alt="(图一)"></p>
<p>重启网卡，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart network （启动中）</span><br><span class="line">$ sudo systemctl start network   （已关闭）</span><br></pre></td></tr></table></figure>

<h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><p>下表是 Docker 存储驱动类型和 CentOS 文件系统类型的对应关系：</p>
<table>
<thead>
<tr>
<th align="center">Storage driver</th>
<th align="center">Supported backing filesystems</th>
</tr>
</thead>
<tbody><tr>
<td align="center">overlay2</td>
<td align="center">xfs with ftype&#x3D;1, ext4</td>
</tr>
<tr>
<td align="center">fuse-overlayfs</td>
<td align="center">any filesystem</td>
</tr>
<tr>
<td align="center">devicemapper</td>
<td align="center">direct-lvm</td>
</tr>
<tr>
<td align="center">btrfs</td>
<td align="center">btrfs</td>
</tr>
<tr>
<td align="center">zfs</td>
<td align="center">zfs</td>
</tr>
<tr>
<td align="center">vfs</td>
<td align="center">any filesystem</td>
</tr>
</tbody></table>
<p>如果没有在 <code>/etc/docker/daemon.json</code> 指定 storage-driver，  Docker 安装过程中发现 CentOS 文件系统类型不支持存储驱动类型时，会自动降级为支持的存储驱动类型。其中 vfs 存储驱动类型可以在任何文件系统类型中兼容， 保证了 Docker 在安装中能正确初始化存储驱动类型。</p>
<ol>
<li><p>查看各个分区文件类型。执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk -f</span><br></pre></td></tr></table></figure></li>
<li><p>选择要分区的磁盘<br><strong>在分区格式化之前， 请确保重要数据进行备份，因为重新格式化文件系统将删除所有数据。</strong><br>例如，如果要分区的磁盘是&#x2F;dev&#x2F;sda，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo fdisk /dev/sda</span><br></pre></td></tr></table></figure>
<p>在fdisk命令提示符下，可以使用以下命令进行分区：<br>n：创建一个新分区。<br>d：删除一个分区。<br>p：显示分区表。<br>w：保存并退出。<br>使用n命令创建一个新分区。根据提示输入分区的起始扇区和大小。<br>使用p命令查看分区表，确保分区已成功创建。<br>使用w命令保存并退出fdisk。</p>
</li>
<li><p>分区格式化，执行命令：<br>如果要分区的磁盘是&#x2F;dev&#x2F;sda</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkfs.xfs -n ftype=1 /dev/sda</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载重新格式化的文件系统。运行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mount -o ftype=1 /dev/sda /var/lib/docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h3><p>本机安装的 Docker 为 24.0.4 ，要求内核版本为 3.10 或更高版本。<br>如果内核版本过低， Docker 安装之后， 容器暴露的接口，将会无法访问。</p>
<ol>
<li>查看当前系统的内核版本，执行命令：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></li>
<li>更新系统软件包列表，执行命令：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure></li>
<li>安装 ELRepo 存储库，执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li>安装最新的稳定内核版本，执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum --enablerepo=elrepo-kernel install kernel-ml</span><br></pre></td></tr></table></figure></li>
<li>更新 GRUB 配置以使用新内核，执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></li>
<li>重启系统以应用新内核，执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></li>
<li>重启后，确认内核版本是否已成功升级，执行命令：。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="清理-Docker"><a href="#清理-Docker" class="headerlink" title="清理 Docker"></a>清理 Docker</h3><p>移除之前安装的 Docker，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="添加-Docker-仓库"><a href="#添加-Docker-仓库" class="headerlink" title="添加 Docker 仓库"></a>添加 Docker 仓库</h3><p>添加 Docker 阿里云镜像仓库，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>安装 docker 依赖，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<h3 id="修改-Docker-仓库"><a href="#修改-Docker-仓库" class="headerlink" title="修改 Docker 仓库"></a>修改 Docker 仓库</h3><p> 编辑 <code>/etc/docker/daemon.json</code> 文件。执行命令：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> $ vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">向文件中添加下面的配置：</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p>
<h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h3><p>启动 Docker，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>拉取 Nginx 镜像，执行命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 Nginx ，并暴露 80 接口，执行命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run nginx -d -p 80:80</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否启动成功<br>浏览器访问 <code>http://192.168.128.3</code>， 如(图二)所示：<br><img data-src="/blog/2023/07/23/centos/docker-install/nginx.jpg" alt="(图二)"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>发布 npm 包</title>
    <url>/blog/2023/08/07/npm/publish/</url>
    <content><![CDATA[<p>平时我们写的一些前端公共工具或者库，在复用时如果还手动复制，效率不仅比较低并且不够优雅。<br>为什么不发布到 <a href="https://docs.npmjs.com/">npm</a> 仓库呢？<br>发布到仓库后，我们在其他项目中使用时只需要使用 <code>npm i xxx</code> 命令安装就可以了。  </p>
<p>发布一个包通常包含以下几步操作，没有任何难度：  </p>
<span id="more"></span>

<h2 id="注册-npm-账号"><a href="#注册-npm-账号" class="headerlink" title="注册 npm 账号"></a>注册 npm 账号</h2><p>要往 npm 发布包，首先要有一个 npm 账号，可以在 <code>https://www.npmjs.com/signup</code> 进行注册。</p>
<h2 id="登录账号"><a href="#登录账号" class="headerlink" title="登录账号"></a>登录账号</h2><p>在项目中使用 <code>npm login</code> 命令登录注册的账号。<br>登录完成后，使用 <code>npm whoami</code> 命令查看当前登录的账号，确认是否登录成功。</p>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>发布包之前，请确保项目已经符合发布的标准，别人安装后能正常使用。  </p>
<p>一般需要正确配置以下：  </p>
<ol>
<li><p><code>package.json</code> 文件中 <code>dependencies</code> 配置正确的依赖。  </p>
</li>
<li><p><code>package.json</code> 文件中 <code>main</code> 配置正确的入口文件，这样在项目中才能正确导入模块。</p>
</li>
<li><p>构建项目</p>
</li>
<li><p>npm 的 registry 必须是 <code>https://registry.npmjs.org/</code>，如果配置了代理镜像，请改过来。</p>
</li>
<li><p>确保包名唯一。包名就是  <code>package.json</code> 文件中 <code>name</code> 的值，可使用 <code> npm view &lt;name&gt;</code> 命令查看此包名是否存在。</p>
</li>
</ol>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>使用 <code>npm publish</code> 发布本地包到 npm registry，发布成功后。可以在 <code>https://www.npmjs.com/</code> 网站登录自己的账号，进入 packages 页面查看是否发布成功，如（图一）所示:<br><img data-src="/blog/2023/08/07/npm/publish/package.jpg" alt="(图一)"></p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>publish</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaflet.js Guide</title>
    <url>/blog/2023/08/07/map/leaflet/</url>
    <content><![CDATA[<p><a href="https://leafletjs.com/index.html">leaflet.js</a> 是用于创建地图的开源 JavaScript 库。<br>官方描述：</p>
<blockquote>
<p>Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps. Weighing just about 42 KB of JS, it has all the mapping features most developers ever need.</p>
</blockquote>
<blockquote>
<p>Leaflet is designed with simplicity, performance and usability in mind. It works efficiently across all major desktop and mobile platforms, can be extended with lots of plugins, has a beautiful, easy to use and well-documented API and a simple, readable source code that is a joy to contribute to.</p>
</blockquote>
<p>中文：</p>
<blockquote>
<p>Leaflet 是一个领先的开源 JavaScript 库，用于创建移动友好的交互式地图。它只有大约 42 KB 的 JavaScript 文件大小，却提供了大多数开发者所需的所有地图功能。</p>
</blockquote>
<blockquote>
<p>Leaflet 的设计理念是简单性、性能和易用性。它在各种主要的桌面和移动平台上高效运行。</p>
</blockquote>
<blockquote>
<p>Leaflet 的另一个优点是可扩展性。它提供了许多插件，可以轻松集成到地图中，增强其功能并添加额外的特性。<br>Leaflet 还以其良好的文档化 API 而自豪，这使得开发者更容易理解和利用其功能。Leaflet 的源代码也以其简洁和可读性而闻名，这鼓励开发者做出贡献。</p>
</blockquote>
<span id="more"></span>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>国内主要有百度地图、高德地图、天地图等地图开发库，Leaflet.js 与其相比主要特点是轻量级和较高的扩展性。</p>
<p>在设计概念上，Leaflet.js 和其他地图库是相似的，都具有 图层、矢量图形、点标记等核心部件。<br>不同的是，Leaflet.js 是一个纯前端的库， 没有提供服务接口，如果有相关需求需要对接高德地图等其他三方库的接口，这也是它轻量级的原因之一。</p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>首先使用 leaflet.js 创建一个简单的例子，了解一下这个库</p>
<ol>
<li>安装 leaflet 依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev leaflet</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 index.html 文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建 index.js 文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  map,</span><br><span class="line">  tileLayer,</span><br><span class="line">  featureGroup,</span><br><span class="line">  geoJSON,</span><br><span class="line">  marker,</span><br><span class="line">  divIcon,</span><br><span class="line">  <span class="title class_">Point</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">map</span>(<span class="string">&quot;map&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">zoomDelta</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="attr">attributionControl</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">zoomControl</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">maxBoundsViscosity</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="attr">maxBounds</span>: [</span><br><span class="line">      [-<span class="number">80</span>, <span class="number">160</span>],</span><br><span class="line">      [<span class="number">80</span>, -<span class="number">160</span>],</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapInstance = <span class="title function_">initMap</span>();</span><br></pre></td></tr></table></figure>

<p>至此，地图就创建完了，但是这时地图没有配置图层，所以界面是白的。<br>添加下面代码，使其展示地图图层</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tileLayer &#125; <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tileLayer = <span class="title function_">tileLayer</span>(</span><br><span class="line">  <span class="string">&quot;http://webst04.is.autonavi.com/appmaptile?style=6&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">minZoom</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">mapInstance.<span class="title function_">addLayer</span>(tileLayer);</span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>只是简单了解 Leaflet.js，远不能实现项目中复杂的需求，我们还要多了解一下它的 API 和实现原理。</p>
<p>总而言之，地图类的库，最核心的就是 layer，即图层。<br>图层这个概念使用范围很广，图像类的技术都有图层的概念，如图片就是多个图层纵向合并起来的画面；浏览器展示的页面，实际也是多个图层经过栅格化后呈现的画面。</p>
<p>在 Leaflet.js 中一切皆图层， Marker 是图层，矢量图形是图层，等等。</p>
<p>首先看一下 Leaflet.js 的核心类图：</p>
<pre class="mermaid">classDiagram

class Class

class Events{
  on(type: String, fn: Function, context?: Object): this
  off(type: String, fn?: Function, context?: Object): this
  fire(type: String, data?: Object, propagate?: Boolean):this
  listens(type: String):Boolean
  once(type: String, fn: Function, context?: Object): this
  addEventParent(obj: Evented): this
  removeEventParent(obj: Evented): this
}

class Layer{
  Object options

  addTo(map: Map|LayerGroup): this
  remove()
  removeFrom(map: Map)
  getPane(name? : String): HTMLElement
  addInteractiveTarget(HTMLElement): this
  removeInteractiveTarget(HTMLElement): this
  getAttribution(): String

  bindPopup(content: String|HTMLElement|Function|Popup, options?: Popup options): this
  unbindPopup(): this
  openPopup(latlng?: LatLng): this
  closePopup(): this
  togglePopup(): this
  isPopupOpen(): boolean
  setPopupContent(content: String|HTMLElement|Popup): this
  getPopup(): Popup

  bindTooltip(content: String|HTMLElement|Function|Tooltip, options?: Tooltip options): this
  unbindTooltip(): this
  openTooltip(latlng?: LatLng): this
  closeTooltip(): this
  toggleTooltip(): this
  isTooltipOpen(): boolean
  setTooltipContent(content: String|HTMLElement|Tooltip): this
  getTooltip(): Tooltip
}

class DivOverlay{
  Object options

  onAdd(map: Map)
  onRemove(map: Map)
  getLatLng(): LatLng
  setLatLng(latlng: LatLng): this
  getContent(): String|HTMLElement
  setContent(htmlContent: String|HTMLElement|Function): this
  getElement(): String|HTMLElement
  update()
  getEvents(): Object
  isOpen(): Boolean
  bringToFront(): this
  bringToBack(): this
}

class ImageOverlay
class VideoOverlay


class GridLayer{
  Object options
  onAdd()
  beforeAdd(map: Map)
  onRemove(map: Map)
  bringToFront(): this
  bringToBack(): this
  getContainer(): HTMLElement
  setOpacity(opacity: Number): this
  setZIndex(zIndex: Number): this
  isLoading(): Boolean
  redraw(): this
  getEvents(): Object
  createTile(): HTMLDivElement
  getTileSize(): Point
}

class TileLayer{
  Object options
  setUrl(url: String, noRedraw?: Boolean): this
  createTile(coords: Object, done?: Function): HTMLElement
  getTileUrl(coords: Object): String
}

class TileLayerWMS{
  Object defaultWmsParams
  onAdd(map: Map)
  getTileUrl(coords: Object): String
  setParams(params: Object, noRedraw?: Boolean): this
}

class Popup{
  Object options
  openOn(map: Map): this
  onAdd(map: Map)
  onRemove(map: Map)
  getEvents(): Object
}

class Tooltip{
  Object options
  onAdd(map: Map)
  onRemove(map: Map)
  getEvents(): Object
}

class LayerGroup{
  _Object _layers
  addLayer(layer: Layer): this
  removeLayer(layer: Layer): this
  hasLayer(layer: Layer): Boolean
  clearLayers(): this
  invoke(methodName: String, …): this
  onAdd(map: Map)
  onRemove(map: Map)
  eachLayer(fn: Function, context?: Object): this
  getLayer(id: Number): Layer
  getLayers(): Layer[]
  setZIndex(zIndex: Number): this
  getLayerId(layer: Layer): Number
}

class FeatureGroup{
  addLayer(layer: Layer): this
  removeLayer(layer: Layer): this
  setStyle(style: Path options): this
  bringToFront(): this
  bringToBack(): this
  getBounds(): LatLngBounds
  coordsToLatLng(coords: Array): LatLng
  coordsToLatLngs(coords: Array, levelsDeep?: Number, coordsToLatLng?: Function): Array
  latLngToCoords(latlng: LatLng, precision?: Number): Array
}

class GeoJSON{
  addData( data: GeoJSON ): this
  resetStyle( layer: Path ): this
  setStyle( style: Function ): this
}

class Marker{
  onAdd(map: Map)
  onRemove(map: Map)
  getEvents(): Object
  getLatLng(): LatLng
  setLatLng(latlng: LatLng): this
  getElement(): String|HTMLElement
  update()
  setZIndexOffset(offset: Number): this
  setIcon(icon: Icon): this
  setOpacity(opacity: Number): this

  toGeoJSON(precision: number)
}

class Icon{
  Object options
  createIcon(oldIcon?: HTMLElement): HTMLElement
  createShadow(oldIcon?: HTMLElement): HTMLElement
}

class DivIcon{
  createIcon(oldIcon?: HTMLElement): HTMLElement
  createShadow()
}


class Path{
  Object options
  onAdd()
  beforeAdd(map: Map)
  onRemove(map: Map)
  redraw(): this
  setStyle(style: Path options): this
  bringToFront(): this
  bringToBack(): this
  getElement(): HTMLElement
}

class Renderer
class SVG
class Canvas
class Polyline
class Polygon
class Rectangle
class CircleMarker
class Circle

class Map{
  setView(center: LatLng, zoom: Number, options?: Zoom/pan options): this

  addLayer(layer: Layer): this
  removeLayer(layer: Layer): this
  hasLayer(layer: Layer): Boolean
  eachLayer(fn: Function, context?: Object): this

  openPopup(latlng?: LatLng): this
  closePopup(): this

  openTooltip(tooltip: Tooltip): this
  closeTooltip(tooltip?: Tooltip): this
}



Events <|-- Layer
Events <|-- Map
Layer <|-- DivOverlay
Layer <|-- ImageOverlay
Layer <|-- GridLayer
Layer <|-- LayerGroup
Layer <|-- Marker
Layer <|-- Path
Layer <|-- Renderer

DivOverlay <|-- Popup
DivOverlay <|-- Tooltip
ImageOverlay <|-- VideoOverlay
GridLayer <|-- TileLayer
TileLayer <|-- TileLayerWMS
LayerGroup <|-- FeatureGroup
FeatureGroup <|-- GeoJSON

Class <|-- Icon
Icon <|-- DivIcon

Path <|-- CircleMarker
CircleMarker <|-- Circle
Path <|-- Polyline
Polyline <|-- Polygon
Polygon <|-- Rectangle
Renderer <|-- Canvas
Renderer <|-- SVG</pre>

<p>使用 leaflet.js 编程，基本上是对上面的几个类进行操作，下面实现几个常用的需求：</p>
<h3 id="设置地图瓦片"><a href="#设置地图瓦片" class="headerlink" title="设置地图瓦片"></a>设置地图瓦片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tileLayer &#125; <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tiltUrl =</span><br><span class="line">  <span class="string">&quot;http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> tileLayer = <span class="title function_">tileLayer</span>(tiltUrl, &#123;</span><br><span class="line">  <span class="attr">maxZoom</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">minZoom</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line">mapInstance.<span class="title function_">addLayer</span>(tileLayer);</span><br></pre></td></tr></table></figure>

<p>tiltUrl 是地图瓦片的网络地址，所以这块是很灵活的，可以随意的切换想用的地图。<br>以下是几种地图瓦片的网络地址：</p>
<ul>
<li><p>高德 <a href="http://webst04.is.autonavi.com/appmaptile?style=6&x=%7Bx%7D&y=%7By%7D&z=%7Bz%7D">http://webst04.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z}</a></p>
</li>
<li><p><a href="http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer/tile/%7Bz%7D/%7By%7D/%7Bx%7D">http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer/tile/{z}/{y}/{x}</a></p>
</li>
<li><p><a href="http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/%7Bz%7D/%7By%7D/%7Bx%7D">http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}</a></p>
</li>
</ul>
<p>如 (图一)<br><img data-src="/blog/2023/08/07/map/leaflet/1.jpg" alt="(图一)"></p>
<h3 id="在地图上画地区边界"><a href="#在地图上画地区边界" class="headerlink" title="在地图上画地区边界"></a>在地图上画地区边界</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; geoJSON &#125; <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> polygonLayer = <span class="title function_">geoJSON</span>(polygonGeojson, &#123;</span><br><span class="line">  <span class="attr">fill</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br><span class="line">mapInstance.<span class="title function_">addLayer</span>(polygonLayer);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中 polygonGeojson 变量是一个 Polygon 或者 MultiPolygon 类型的 GeoJSON 数据。<br>数据可以在 <a href="http://datav.aliyun.com/portal/school/atlas/area_selector">Data V</a> 获取。<br><a href="https://datatracker.ietf.org/doc/html/rfc7946#autoid-1">GeoJSON</a> 是一种用于编码各种地理数据的格式，使用 JavaScript 对象表示（JSON）的结构。  </p>
<p>如 (图二)<br><img data-src="/blog/2023/08/07/map/leaflet/2.jpg" alt="(图二)"></p>
<h3 id="创建-Marker"><a href="#创建-Marker" class="headerlink" title="创建 Marker"></a>创建 Marker</h3><p>一般情况都会在地图上创建多个 Marker，我这里为了统一管理， 放到了一个 LayerGroup 里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  map,</span><br><span class="line">  tileLayer,</span><br><span class="line">  featureGroup,</span><br><span class="line">  geoJSON,</span><br><span class="line">  marker,</span><br><span class="line">  divIcon,</span><br><span class="line">  <span class="title class_">Point</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> markerLayer = <span class="title function_">featureGroup</span>([], &#123;</span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pointLayer;</span><br><span class="line"><span class="keyword">let</span> currentZoom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createMarker = <span class="keyword">function</span> <span class="title function_">createMarker</span>(<span class="params">geoJsonPoint, latlng</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> zoom = (mapInstance = <span class="title function_">getZoom</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> properties = geoJsonPoint.<span class="property">geometry</span>.<span class="property">properties</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> icon = <span class="title function_">divIcon</span>(&#123;</span><br><span class="line">    <span class="attr">html</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;point&quot; style=&quot;background: <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          properties?.level?.color</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>;display: <span class="subst">$&#123;zoom &lt; <span class="number">8</span> ? <span class="string">&quot;block&quot;</span> : <span class="string">&quot;none&quot;</span>&#125;</span>;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;pointVal&quot; style=&quot;background:  <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          properties?.level?.color</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>; display:<span class="subst">$&#123;zoom &gt;= <span class="number">8</span> ? <span class="string">&quot;block&quot;</span> : <span class="string">&quot;none&quot;</span>&#125;</span>;&quot;&gt;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;properties[<span class="variable language_">this</span>.activeFactor.property]&#125;</span></span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;leaflet-div-icon&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> m = <span class="title function_">marker</span>([latlng.<span class="property">lng</span>, latlng.<span class="property">lat</span>], &#123;</span><br><span class="line">    <span class="attr">icon</span>: icon,</span><br><span class="line">    <span class="attr">riseOnHover</span>: <span class="literal">true</span>,</span><br><span class="line">    geoJsonPoint,</span><br><span class="line">  &#125;).<span class="title function_">bindTooltip</span>(properties?.<span class="property">cityName</span>, &#123;</span><br><span class="line">    <span class="comment">// 给 marker 绑定一个 tooltip，鼠标放上去的时候展示一些提示文字</span></span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;leaflet-tooltip&quot;</span>,</span><br><span class="line">    <span class="attr">sticky</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">offset</span>: <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">18</span>, -<span class="number">8</span>),</span><br><span class="line">    <span class="attr">direction</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  markerLayer.<span class="title function_">addLayer</span>(m);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleZoomend = <span class="keyword">function</span> (<span class="params">&#123; sourceTarget &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> zoom = sourceTarget.<span class="title function_">getZoom</span>();</span><br><span class="line">  <span class="keyword">const</span> isChange =</span><br><span class="line">    (<span class="number">8</span> &lt;= zoom &amp;&amp; currentZoom &lt;= <span class="number">7</span>) || (<span class="number">8</span> &lt;= currentZoom &amp;&amp; zoom &lt;= <span class="number">7</span>);</span><br><span class="line">  currentZoom = zoom;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当地图 zoom 改变到界限值时， 重新创建 Marker，一般用于点的聚合和分裂</span></span><br><span class="line">  <span class="keyword">if</span> (isChange) &#123;</span><br><span class="line">    pointLayer = <span class="title function_">batchCreatePoint</span>(geometryCollectionGeoJson);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> batchCreatePoint = <span class="keyword">function</span> (<span class="params">geometryCollectionGeoJson</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (markerLayer &amp;&amp; mapInstance.<span class="title function_">hasLayer</span>(markerLayer)) &#123;</span><br><span class="line">    markerLayer.<span class="title function_">eachLayer</span>(<span class="function">(<span class="params">layer</span>) =&gt;</span> layer.<span class="title function_">off</span>()).<span class="title function_">clearLayers</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">geoJSON</span>(geometryCollectionGeoJson, &#123;</span><br><span class="line">    <span class="attr">pointToLayer</span>: createMarker,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mapInstance.<span class="title function_">on</span>(<span class="string">&quot;zoomend&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleZoomend</span>);</span><br><span class="line"></span><br><span class="line">pointLayer = <span class="title function_">batchCreatePoint</span>(geometryCollectionGeoJson);</span><br><span class="line">mapInstance.<span class="title function_">addLayer</span>(pointLayer);</span><br><span class="line">mapInstance.<span class="title function_">addLayer</span>(markerLayer);</span><br></pre></td></tr></table></figure>

<p>其中 geometryCollectionGeoJson 变量是一个 GeometryCollection 类型的 GeoJSON 数据。</p>
<p>如 (图三) 和（图四）<br><img data-src="/blog/2023/08/07/map/leaflet/3.jpg" alt="(图三)"><br><img data-src="/blog/2023/08/07/map/leaflet/4.PNG" alt="(图四)"></p>
<h3 id="点击-Marker-打开对话框展示详情"><a href="#点击-Marker-打开对话框展示详情" class="headerlink" title="点击 Marker 打开对话框展示详情"></a>点击 Marker 打开对话框展示详情</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mapInstance.<span class="title function_">bindPopup</span>( <span class="attr">content</span>: <span class="title class_">String</span>|<span class="title class_">HTMLElement</span>|<span class="title class_">Function</span>|<span class="title class_">Popup</span> , &#123;</span><br><span class="line">  <span class="attr">minWidth</span>: <span class="number">400</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如 (图五)<br><img data-src="/blog/2023/08/07/map/leaflet/5.jpg" alt="(图五)"></p>
]]></content>
      <categories>
        <category>Map</category>
      </categories>
      <tags>
        <tag>Map</tag>
        <tag>Leatlet</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Radix Sort</title>
    <url>/blog/2023/08/01/sort/base-sort/</url>
    <content><![CDATA[<p>排序和查找是常见的编程基本算法，刚毕业时还曾花时间<a href="https://github.com/JinZhang-96/algorithm/tree/master/algorithm/src/com/zb/arraySort">学习</a>，由于平时不怎么使用，所以现在对每种排序算法的计算过程已经渐渐淡忘。。。</p>
<p>今天回忆了一下基数排序的算法的思路，动手敲了一遍代码，算是熟练了一些，有些心得：</p>
<blockquote>
<p>学习算法不能仅仅参照一个例题或者一段实现代码，死记硬背的学习，而是需要理解其算法思想，融会贯通，这样才能举一反三，精益求精。就像学习数学一样，如果不理解其公式，就很难做到灵活使用，在题目中提炼数学抽象模型，套用数学公式解决问题。</p>
</blockquote>
<p>排序算法有很多，如：冒泡排序、选择排序、插入排序、快速排序、堆排序、归并排序、基数排序，其中基数排序是一个较稳定并且高效的算法，非常适合对元素位数相近的数组排序。</p>
<span id="more"></span>

<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>基数排序的时间复杂度受待排数据最大数位数 k 的影响，如最大数位数为 10，则 k 为 10。<br>其时间复杂度公式为 <code>O(n * k)</code>。</p>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>基数排序的核心思想是利用数据局部顺序性的传递，一步步进行推导，来确定数据最终的顺序性。</p>
<ol>
<li>从数据的第一位开始比较， 把数字相同的归类到一起。</li>
<li>归类完成后，再把归类的数据从小到大聚集到一起。</li>
<li>循环 第 1 和第 2 步，直到所有的位数都比较一遍。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: TODO</span></span><br><span class="line"><span class="comment"> * @Author: zb</span></span><br><span class="line"><span class="comment"> * @Date: 2023-08-01 21:17:58</span></span><br><span class="line"><span class="comment"> * @LastEditors: zb</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2023-08-07 01:38:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1000</span>,</span><br><span class="line">  max = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">  data.<span class="title function_">push</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * max));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapData = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; data 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; position 第几位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> baseSort = <span class="keyword">function</span> (<span class="params">data, position</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> l = data[i].<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 取出当前排序位数的数字， 如果没有数字，则设置为最小值0</span></span><br><span class="line">    <span class="keyword">let</span> n =</span><br><span class="line">      l - <span class="number">1</span> &lt; position</span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(data[i].<span class="title function_">toString</span>().<span class="title function_">charAt</span>(l - <span class="number">1</span> - position));</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (!mapData.<span class="title function_">has</span>(n)) &#123;</span><br><span class="line">      mapData.<span class="title function_">set</span>(n, []);</span><br><span class="line">    &#125;</span><br><span class="line">    mapData.<span class="title function_">get</span>(n).<span class="title function_">push</span>(data[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并排序完的数组</span></span><br><span class="line">  <span class="keyword">return</span> [...mapData.<span class="title function_">keys</span>()]</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> mapData.<span class="title function_">get</span>(key))</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">arr, itemArr</span>) =&gt;</span> (arr.<span class="title function_">push</span>(...itemArr), arr), []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到待排序数组中位数最长的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLength, data[i].<span class="title function_">toString</span>().<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对待排序数组中的每一位数字进行排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">  data = <span class="title function_">baseSort</span>(data, i);</span><br><span class="line">  mapData.<span class="title function_">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sort</tag>
        <tag>Radix Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-ui 之 Tooltip 无法展示</title>
    <url>/blog/2023/08/05/bug/element-ui/tooltip/</url>
    <content><![CDATA[<p>使用 <a href="https://cn.vitejs.dev/">Vite</a> 搭建了一个 基于 <a href="https://element.eleme.cn/#/zh-CN">Element-ui</a> 的组件库。 开发过程中遇到一个 Tooltip 组件无法展示的问题。</p>
<span id="more"></span>

<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>代码环境：  </p>
<p>启动页面 <code>index.html</code> ：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-tooltip</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;Top Center 提示文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placement</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>上边<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>index.tsx</code>：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">vue</span>(&#123;&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>版本：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;element-ui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.13&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.14&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="Bug-原因"><a href="#Bug-原因" class="headerlink" title="Bug 原因"></a>Bug 原因</h2><p>刚开始使用 <code>import vue from &quot;vue&quot;</code> 引入了 vue 依赖，但是运行提示了 <code>You are using the runtime-only build of Vue where the template compiler is not available.</code> 可知它导入的是 runtime 版本的 vue，但是这里需要全量版本的 vue。  </p>
<p>然后我又改用 <code>import vue from &quot;vue/dist/vue.esm&quot;</code> 引入 vue 依赖，这时候项目能运行起来了，正在我以为万事大吉的时候，一个奇怪的 bug 正在等着我去发现。。。  </p>
<p>果不其然，开发过程中我发现了 Tooltip 组件没有展示的问题。   </p>
<p>我首先使用调试工具进入 Tooltip 组件的代码内部定位问题，发现在 <code>element-ui/src/utils/vue-popper</code> 文件中，获取 <code>this.$refs.popper</code> 变量的值为 <code>undefined</code>，这导致了 tooltip 的文本提示没有挂载到 html 中，所以 Tooptip 就无法展示了。</p>
<p>我先是检查 <code>element-ui</code> 和 <code>vue</code> 是否有版本冲突，无果。最终也没发现具体是什么原因导致 <code>this.$refs.popper</code> 这个变量取不到值的，猜测应该是 <code>import vue from &quot;vue/dist/vue.esm&quot;</code> 这种方式引入的 vue 有 bug，所以最后更换了 vue 的引入方式。</p>
<p>Tooltip 组件代码：  </p>
<p><code>element-ui/packages/tooltip/src/main.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Popper</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/vue-popper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&#x27;throttle-debounce/debounce&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addClass, removeClass, on, off &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; generateId &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/util&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ElTooltip&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mixins</span>: [<span class="title class_">Popper</span>], <span class="comment">// 通过 mixins 混合了 ` element-ui/src/utils/vue-popper ` 文件中的东西</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">openDelay</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">disabled</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">manual</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">effect</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;dark&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">arrowOffset</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">popperClass</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">visibleArrow</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">transition</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;el-fade-in-linear&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">popperOptions</span>: &#123;</span><br><span class="line">      <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">boundariesPadding</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">gpuAcceleration</span>: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enterable</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hideAfter</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tabindex</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tooltipId</span>: <span class="string">`el-tooltip-<span class="subst">$&#123;generateId()&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">timeoutPending</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">focusing</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$isServer</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">popperVM</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">node</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).$mount(); <span class="comment">// 初始化 this.popperVM ( vue实例 ), 没有挂载到任何地方。 </span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">debounceClose</span> = <span class="title function_">debounce</span>(<span class="number">200</span>, <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleClosePopper</span>());</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">popperVM</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperVM</span>.<span class="property">node</span> = (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&#123;</span> <span class="attr">this.transition</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onAfterLeave</span>=<span class="string">&#123;</span> <span class="attr">this.doDestroy</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onMouseleave</span>=<span class="string">&#123;</span> () =&gt;</span> &#123; this.setExpectedState(false); this.debounceClose(); &#125; &#125;</span></span><br><span class="line"><span class="language-xml">            onMouseenter= &#123; () =&gt; &#123; this.setExpectedState(true); &#125; &#125;</span></span><br><span class="line"><span class="language-xml">            ref=&quot;popper&quot;</span></span><br><span class="line"><span class="language-xml">            role=&quot;tooltip&quot;</span></span><br><span class="line"><span class="language-xml">            id=&#123;this.tooltipId&#125;</span></span><br><span class="line"><span class="language-xml">            aria-hidden=&#123; (this.disabled || !this.showPopper) ? &#x27;true&#x27; : &#x27;false&#x27; &#125;</span></span><br><span class="line"><span class="language-xml">            v-show=&#123;!this.disabled &amp;&amp; this.showPopper&#125; // 提示文字展示， 需要 &#123;!this.disabled &amp;&amp; this.showPopper&#125; 条件为真</span></span><br><span class="line"><span class="language-xml">            class=&#123;</span></span><br><span class="line"><span class="language-xml">              [&#x27;el-tooltip__popper&#x27;, &#x27;is-&#x27; + this.effect, this.popperClass]</span></span><br><span class="line"><span class="language-xml">            &#125;&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; this.$slots.content || this.content &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span>);</span><br><span class="line">    &#125; <span class="comment">// 这里就是 tooltip 组件的模板</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> firstElement = <span class="variable language_">this</span>.<span class="title function_">getFirstElement</span>();</span><br><span class="line">    <span class="keyword">if</span> (!firstElement) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = firstElement.<span class="property">data</span> = firstElement.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">    data.<span class="property">staticClass</span> = <span class="variable language_">this</span>.<span class="title function_">addTooltipClass</span>(data.<span class="property">staticClass</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> firstElement;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">referenceElm</span> = <span class="variable language_">this</span>.<span class="property">$el</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$el</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-describedby&#x27;</span>, <span class="variable language_">this</span>.<span class="property">tooltipId</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$el</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;tabindex&#x27;</span>, <span class="variable language_">this</span>.<span class="property">tabindex</span>);</span><br><span class="line">      <span class="title function_">on</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;mouseenter&#x27;</span>, <span class="variable language_">this</span>.<span class="property">show</span>); <span class="comment">// 绑定 mouseenter 事件，正常逻辑 mouseenter 触发会让 tooltip 的提示文字展示</span></span><br><span class="line">      <span class="title function_">on</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;mouseleave&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hide</span>); <span class="comment">// 绑定 mouseleave 事件，正常逻辑 mouseleave 触发会让 tooltip 的提示文字隐藏</span></span><br><span class="line">      <span class="title function_">on</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;focus&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> || !<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">handleFocus</span>();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> instance = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>[<span class="number">0</span>].<span class="property">componentInstance</span>;</span><br><span class="line">        <span class="keyword">if</span> (instance &amp;&amp; instance.<span class="property">focus</span>) &#123;</span><br><span class="line">          instance.<span class="title function_">focus</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">handleFocus</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">on</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;blur&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBlur</span>);</span><br><span class="line">      <span class="title function_">on</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">removeFocusing</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fix issue https://github.com/ElemeFE/element/issues/14424</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">popperVM</span>) &#123;   <span class="comment">// this.value 是是否展示文本提示的意思，this.showPopper 会同步这个值, 代码可见 ` element-ui/src/utils/vue-popper ` 文件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperVM</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">updatePopper</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">focusing</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="title function_">addClass</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;focusing&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">removeClass</span>(<span class="variable language_">this</span>.<span class="property">referenceElm</span>, <span class="string">&#x27;focusing&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setExpectedState</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleShowPopper</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setExpectedState</span>(<span class="literal">false</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">debounceClose</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleFocus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">focusing</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">show</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleBlur</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">focusing</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">hide</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">removeFocusing</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">focusing</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addTooltipClass</span>(<span class="params">prev</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!prev) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;el-tooltip&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;el-tooltip &#x27;</span> + prev.<span class="title function_">replace</span>(<span class="string">&#x27;el-tooltip&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleShowPopper</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">expectedState</span> || <span class="variable language_">this</span>.<span class="property">manual</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeout</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timeout</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// mouseenter 触发时，就这一段有效的代码，但是这时候 tooltip 还没挂载到 dom 上， 所以这个变量没有太大意义， 其他地方应该还有关键代码</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">showPopper</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;, <span class="variable language_">this</span>.<span class="property">openDelay</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hideAfter</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timeoutPending</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">showPopper</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">hideAfter</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleClosePopper</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">enterable</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">expectedState</span> || <span class="variable language_">this</span>.<span class="property">manual</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeout</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timeoutPending</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeoutPending</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showPopper</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">disabled</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">doDestroy</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setExpectedState</span>(<span class="params">expectedState</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expectedState === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeoutPending</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">expectedState</span> = expectedState;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFirstElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> slots = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(slots)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> element = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; slots.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (slots[index] &amp;&amp; slots[index].<span class="property">tag</span>) &#123;</span><br><span class="line">          element = slots[index];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">popperVM</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">popperVM</span>.$destroy();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reference = <span class="variable language_">this</span>.<span class="property">referenceElm</span>;</span><br><span class="line">    <span class="keyword">if</span> (reference.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">off</span>(reference, <span class="string">&#x27;mouseenter&#x27;</span>, <span class="variable language_">this</span>.<span class="property">show</span>);</span><br><span class="line">      <span class="title function_">off</span>(reference, <span class="string">&#x27;mouseleave&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hide</span>);</span><br><span class="line">      <span class="title function_">off</span>(reference, <span class="string">&#x27;focus&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleFocus</span>);</span><br><span class="line">      <span class="title function_">off</span>(reference, <span class="string">&#x27;blur&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleBlur</span>);</span><br><span class="line">      <span class="title function_">off</span>(reference, <span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">removeFocusing</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>element-ui/src/utils/vue-popper.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">PopupManager</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/popup&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PopperJS</span> = <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$isServer</span> ? <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; : <span class="built_in">require</span>(<span class="string">&#x27;./popper&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stop</span> = e =&gt; e.<span class="title function_">stopPropagation</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">HTMLElement</span>&#125; [reference=$refs.reference] - The reference element used to position the popper.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">HTMLElement</span>&#125; [popper=$refs.popper] - The HTML element used as popper, or a configuration used to generate the popper.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; [placement=button] - Placement of the popper accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; [offset=0] - Amount of pixels the popper will be shifted (can be negative).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; [visible=false] Visibility of the popup element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; [visible-arrow=false] Visibility of the arrow, no style.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">transformOrigin</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: [<span class="title class_">Boolean</span>, <span class="title class_">String</span>],</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">placement</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;bottom&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">boundariesPadding</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reference</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">popper</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">offset</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">visibleArrow</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">arrowOffset</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">35</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">appendToBody</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">popperOptions</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">gpuAcceleration</span>: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">showPopper</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">currentPlacement</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: &#123;</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">showPopper</span> = val; <span class="comment">// this.showPopper 同步 this.value</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">showPopper</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">disabled</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">// this.showPopper 为真会触发 this.updatePopper()，这里就是 tooltip 是否展示提示文字的关键代码了</span></span><br><span class="line">      val ? <span class="variable language_">this</span>.<span class="title function_">updatePopper</span>() : <span class="variable language_">this</span>.<span class="title function_">destroyPopper</span>();</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 把 tooltip 的提示文字 装载到 html 上</span></span><br><span class="line">    <span class="title function_">createPopper</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$isServer</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPlacement</span> = <span class="variable language_">this</span>.<span class="property">currentPlacement</span> || <span class="variable language_">this</span>.<span class="property">placement</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/^(top|bottom|left|right)(-start|-end)?$/g</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">currentPlacement</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">popperOptions</span>;</span><br><span class="line">      <span class="keyword">const</span> popper = <span class="variable language_">this</span>.<span class="property">popperElm</span> = <span class="variable language_">this</span>.<span class="property">popperElm</span> || <span class="variable language_">this</span>.<span class="property">popper</span> || <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">popper</span>; <span class="comment">// 获取 tooltip 的提示文本模板，这里获取不到</span></span><br><span class="line">      <span class="keyword">let</span> reference = <span class="variable language_">this</span>.<span class="property">referenceElm</span> = <span class="variable language_">this</span>.<span class="property">referenceElm</span> || <span class="variable language_">this</span>.<span class="property">reference</span> || <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">reference</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!reference &amp;&amp;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">reference</span> &amp;&amp;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">reference</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        reference = <span class="variable language_">this</span>.<span class="property">referenceElm</span> = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">reference</span>[<span class="number">0</span>].<span class="property">elm</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!popper || !reference) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">visibleArrow</span>) <span class="variable language_">this</span>.<span class="title function_">appendArrow</span>(popper);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">appendToBody</span>) <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">popperElm</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">popperJS</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="property">destroy</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="title function_">destroy</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      options.<span class="property">placement</span> = <span class="variable language_">this</span>.<span class="property">currentPlacement</span>;</span><br><span class="line">      options.<span class="property">offset</span> = <span class="variable language_">this</span>.<span class="property">offset</span>;</span><br><span class="line">      options.<span class="property">arrowOffset</span> = <span class="variable language_">this</span>.<span class="property">arrowOffset</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span> = <span class="keyword">new</span> <span class="title class_">PopperJS</span>(reference, popper, options);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="title function_">onCreate</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">resetTransformOrigin</span>();</span><br><span class="line">        <span class="variable language_">this</span>.$nextTick(<span class="variable language_">this</span>.<span class="property">updatePopper</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">onUpdate</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="title function_">onUpdate</span>(options.<span class="property">onUpdate</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="property">_popper</span>.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="title class_">PopupManager</span>.<span class="title function_">nextZIndex</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperElm</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, stop);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">updatePopper</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> popperJS = <span class="variable language_">this</span>.<span class="property">popperJS</span>;</span><br><span class="line">      <span class="comment">// 如果 popperJS 不存在，会触发 this.createPopper();</span></span><br><span class="line">      <span class="keyword">if</span> (popperJS) &#123;</span><br><span class="line">        popperJS.<span class="title function_">update</span>();</span><br><span class="line">        <span class="keyword">if</span> (popperJS.<span class="property">_popper</span>) &#123;</span><br><span class="line">          popperJS.<span class="property">_popper</span>.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="title class_">PopupManager</span>.<span class="title function_">nextZIndex</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createPopper</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">doDestroy</span>(<span class="params">forceDestroy</span>) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">popperJS</span> || (<span class="variable language_">this</span>.<span class="property">showPopper</span> &amp;&amp; !forceDestroy)) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="title function_">destroy</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">destroyPopper</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">popperJS</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">resetTransformOrigin</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">resetTransformOrigin</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">transformOrigin</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">let</span> placementMap = &#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">let</span> placement = <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="property">_popper</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;x-placement&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">let</span> origin = placementMap[placement];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperJS</span>.<span class="property">_popper</span>.<span class="property">style</span>.<span class="property">transformOrigin</span> = <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">transformOrigin</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        ? <span class="variable language_">this</span>.<span class="property">transformOrigin</span></span><br><span class="line">        : [<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;bottom&#x27;</span>].<span class="title function_">indexOf</span>(placement) &gt; -<span class="number">1</span> ? <span class="string">`center <span class="subst">$&#123; origin &#125;</span>`</span> : <span class="string">`<span class="subst">$&#123; origin &#125;</span> center`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">appendArrow</span>(<span class="params">element</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> hash;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">appended</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">appended</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> element.<span class="property">attributes</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^_v-/</span>.<span class="title function_">test</span>(element.<span class="property">attributes</span>[item].<span class="property">name</span>)) &#123;</span><br><span class="line">          hash = element.<span class="property">attributes</span>[item].<span class="property">name</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> arrow = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hash) &#123;</span><br><span class="line">        arrow.<span class="title function_">setAttribute</span>(hash, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      arrow.<span class="title function_">setAttribute</span>(<span class="string">&#x27;x-arrow&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      arrow.<span class="property">className</span> = <span class="string">&#x27;popper__arrow&#x27;</span>;</span><br><span class="line">      element.<span class="title function_">appendChild</span>(arrow);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">doDestroy</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">popperElm</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">popperElm</span>.<span class="property">parentNode</span> === <span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">popperElm</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, stop);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">popperElm</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// call destroy in keep-alive mode</span></span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">beforeDestroy</span>[<span class="number">0</span>].<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li><p>使用 <code>import vue from &quot;vue/dist/vue</code> 导入 Vue<br><code>index.tsx</code>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">&#125;)..$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用运行时版本的 Vue 并改写部分代码<br><code>index.html</code>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">` index.tsx `  </span><br><span class="line">```javascript</span><br><span class="line">import vue from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">new vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  render: (h) =&gt; &#123;</span><br><span class="line">    return </span><br><span class="line">      <span class="tag">&lt;<span class="name">el-tooltip</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;Top Center 提示文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placement</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>上边<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时还是要多记录多积累项目经验，这样才能提高快速解决问题的能力。<br>能够快速解决问题，就可以少加班甚至不加班，让自己有更多可自由支配的时间。<br>加油！</p>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>element-ui</tag>
        <tag>Tooltip</tag>
      </tags>
  </entry>
</search>
